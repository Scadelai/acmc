// Intermediate Representation for gcd.c-

// Function: gcd
// Parameters: u (param1), v (param2)
// Return: result
FUNC_BEGIN gcd, 2
  PARAM u
  PARAM v
  LOCAL t1, t2, t3, t4 // Declare temporaries as locals

  // if v == 0 goto L1_gcd_ret_u
  CMP v, 0
  BR_EQ L1_gcd_ret_u

  // t1 = u / v
  DIV t1, u, v

  // t2 = t1 * v
  MUL t2, t1, v

  // t3 = u - t2
  SUB t3, u, t2

  // t4 = call gcd(v, t3)
  ARG v
  ARG t3
  CALL gcd, 2
  STORE_RET t4 // Store return value of the call into t4

  // return t4
  RETURN t4
  GOTO L_gcd_end // End of 'if' block

L1_gcd_ret_u:
  // return u
  RETURN u

L_gcd_end:
END_FUNC gcd

// Function: main
// Parameters: none
// Return: void
FUNC_BEGIN main, 0
  LOCAL x, y, t5 // Declare locals

  // x = call input()
  CALL input, 0
  STORE_RET x

  // y = call input()
  CALL input, 0
  STORE_RET y

  // t5 = call gcd(x, y)
  ARG x
  ARG y
  CALL gcd, 2
  STORE_RET t5

  // call output(t5)
  ARG t5
  CALL output, 1 // Call output with 1 argument

  // return
  RETURN_VOID
END_FUNC main
